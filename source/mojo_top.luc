//<====Global Variables====>
//1) all functions are listed here with the corresponding 5bit value.
//2) The most significant bit is used to indicated whether ALUFN signals are "ON" or "OFF"
global Func{
  const ADD   = 3b001;      // a + b
  const NOR   = 3b010;      // Returns NOR logic
  const XOR   = 3b011;      // Returns XOR logic
  const CMPEQ = 3b100;      // a == b
  const LDR   = 3b101;      // Loads 
  const MUL   = 3b110;      // a *  b
  const OVFL  = 3b111;      //checks overflow. If true returns 1, else 0.
  
}



module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input diff_btn[2],
    input submit[1],
    input toggleAB,
    output difficultyLED[3],
    output stageLED[4],
    
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  sig value[16];            // current value of a or b
  var on;
  var off;
  
  var easy;
  var medium;
  var hard;
  
  var true;
  var false;
  
  eternite_alufunctions combine;    //Instantiates the game alu functions module
  
  
  /*  Test cases documentation:
     Checks whether values has been changed since it was input.
     
     1) io_button[0] scrambles stored value
     2) ARITHMETIC, COMPARE, BOOLEAN, has the checks for failure
     3) SHIFTING will have to read the io_led outputs
     4) Runs through all ALU funcions fo the particular category in the above order once io_button is pressed.
     5) Enters fail state is any function fails. Enters END State if all funcions passes.
  
  */
  dff a[16](.clk(clk), .rst(rst));        //Stores a value
  dff b[16](.clk(clk), .rst(rst));        //Stores b value
  
  dff count[28](.clk(clk), .rst(rst));    //Timer
  
  fsm diff_lvls (.clk(clk), .rst(rst)) = {SELECT_DIFFICULTY,
    E1, E2, E3, E4,
    M1, M2, M3, M4,
    H1, H2, H3, H4,
    TIMEOUT, GAME_CLEARED};
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    
    
    value[7:0] = io_dip[0];  //sets value by io_dip switches
    value[15:8] = io_dip[1];
    
    on = 8hff;              //to switch on all leds at once
    off = 8h00;             //to switch off all leds at once
    
    difficultyLED[0] = easy;
    difficultyLED[1] = medium;
    difficultyLED[2] = hard;
    stageLED = 0;
    
    true = 1;
    false = 0;
    
    
    //<=========Manual============>
    
    combine.a = a.q;        //connects combine a to stored a value
    combine.b = b.q;        //connects combine b to stored b value
    combine.alufn = io_dip[2][2:0];  //connects combine alufn to io_dip switches
    
    
    io_led[0] = combine.out[7:0];    //displays output from combine on io_led
    io_led[1] = combine.out[15:8];
    io_led[2][4:0] = io_dip[2][4:0]; //displays Manual alufn selection
    io_led[2][7:6] = io_dip[2][7:6]; //A or B storage indication
    
    //Storing A value
    if (toggleAB == 0 && submit == 1 && diff_lvls.q != diff_lvls.SELECT_DIFFICULTY){
      a.d = value;
      io_led[0] = a.q[7:0];
      io_led[1] = a.q[15:8];
    }
    //Storing B Value
    else if (toggleAB == 1 && submit == 1 && diff_lvls.q != diff_lvls.SELECT_DIFFICULTY){
      b.d = value;
      io_led[0] = b.q[7:0];
      io_led[1] = b.q[15:8];
    }
    
    count.d = count.q + 1;          //keeps timer counting
    
    //<=================================>
    //<=========Eternite FSM============>
    //<=================================>
    case(diff_lvls.q){
      diff_lvls.SELECT_DIFFICULTY: //timer full
        easy = false;
        medium = false;
        hard = false;
        
        
        
        if(submit == 1){
          if (diff_btn == 2b01){
            diff_lvls.d = diff_lvls.E1;}
          
          else if (diff_btn == 2b10){
            diff_lvls.d = diff_lvls.M1;}
          
          else if (diff_btn == 2b11){
            diff_lvls.d = diff_lvls.H1;}
        }
      
      //<==========GAME CLEARED/FAILED================>
      diff_lvls.TIMEOUT: //buzz, buzzzzzzzzzzzzz
        //add buzz sound
        
        if(count.q[26] == 1){
          count.d=0;
          diff_lvls.d = diff_lvls.SELECT_DIFFICULTY;
        }
      
      
      
      
      diff_lvls.GAME_CLEARED:  //timer goes back to full
        //timer resets
        
        if(count.q[26] == 1){
          count.d = 0;
          diff_lvls.d = diff_lvls.SELECT_DIFFICULTY;
        }
      
      
      //<============EASY STATES==============>
      diff_lvls.E1: //Love Poem: A=1001
        easy = true;
        stageLED = 4b0001;
        combine.alufn = Func.LDR;
        
        if(count.q[24] == 1){
          count.d = 0;
          if(combine.out == 4b1001){
            diff_lvls.d = diff_lvls.E2;}
        }
      
      diff_lvls.E2: //Wedding Vow: A=0110
        easy = true;
        stageLED = 4b0010;
        combine.alufn = Func.LDR;
        
        if(count.q[24] == 1){
          count.d = 0;
          if(combine.out == 4b0110){
            diff_lvls.d = diff_lvls.E3;}
        }
      diff_lvls.E3: //Committed Sins: A=1011
        easy = true;
        stageLED = 4b0100;
        combine.alufn = Func.LDR;
        
        if(count.q[24] == 1){
          count.d = 0;
          if(combine.out == 4b1011){
            diff_lvls.d = diff_lvls.E4;}
        }
      diff_lvls.E4: //Nor_Love: ~(A|B) = 0000
        easy = true;
        stageLED = 4b1000;
        combine.alufn = Func.NOR;
        
        if(count.q[24] == 1){
          count.d = 0;
          if(combine.out == 4b0000){
            diff_lvls.d = diff_lvls.GAME_CLEARED;}
        }
      
      
      //<==========MEDIUM STATES===============>
      diff_lvls.M1: //Her Wishes: A == B
        medium = true;
        stageLED = 4b0001;
        combine.alufn = Func.CMPEQ;
        
        
        
        if(count.q[24] == 1){
          count.d = 0;
          
          //!!!!!!!!!MUST TEST!!!!!!!!!!!!!!!!!!
          if( (combine.out[7:4] == (a.q[7:4] == b.q[7:4])) && (a.q[3:0] == 4b1001)){
            diff_lvls.d = diff_lvls.M2;}
        }
      
      diff_lvls.M2: //Her Diary: A=1101, answer from easy = 0110
        medium = true;
        stageLED = 4b0010;
        combine.alufn = Func.LDR;
        
        if(count.q[24] == 1){
          count.d = 0;
          if(combine.out == 8b11010110){
            diff_lvls.d = diff_lvls.M3;}
        }
      diff_lvls.M3: //Her Soliloquy: A=1101(14th) & B=0011(March), answer from easy 1011
        medium = true;
        stageLED = 4b0100;
        
        
        if(count.q[24] == 1){
          count.d = 0;
          if(a.q == 8b11011011 && b.q == 8b00111011 ){
            diff_lvls.d = diff_lvls.M4;}
        }
      diff_lvls.M4: //Futile Endeavour: A*B=0, ignore Easy
        medium = true;
        stageLED = 4b1000;
        combine.alufn = Func.MUL;
        
        if(count.q[24] == 1){
          count.d = 0;
          if(combine.out == 0){
            diff_lvls.d = diff_lvls.GAME_CLEARED;}
        }
      
      
      //<===========HARD STATES================>
      diff_lvls.H1: //His Wishes: A = 0010 0010 B = 0001 1011 (221B)
        hard = true;
        stageLED = 4b0001;
        
        combine.alufn = Func.CMPEQ;
        
        //!!!!!!!!!!!!!!!MUST TEST!!!!!!!!!!!!!!!!!
        if(count.q[24] == 1){
          count.d = 0;
          if( (a.q == 16b00100010XXXX1001) && (b.q == 16b00011011XXXXXXXX) && (combine.out[7:4] == (a.q[7:4] == b.q[7:4]))  ){
            diff_lvls.d = diff_lvls.H2;
          }
        }
      diff_lvls.H2: //XOR_Date: A^B = 0, Medium = 1101, Easy= 0110
        hard = true;
        stageLED = 4b0010;
        
        combine.alufn = Func.XOR;
        
        
        //!!!!!!!!MUST TEST!!!!!!!!!!!!!
        if(count.q[24] == 1){
          count.d = 0;
          if( (combine.out[15:8] == 16hFFXX) && (a.q[7:0] == 8b11010110) ){
            diff_lvls.d = diff_lvls.H3;}
        }
      diff_lvls.H3: //Project Completion: A=1100 0101 B:00010001 (12/5/17), ans from medium A=1101(14th) & B=0011(March), answer from easy 1011
        hard = true;
        stageLED = 4b0100;
        
        if(count.q[24] == 1){
          count.d = 0;
          if( (a.q == 16b1100010111011011) && (b.q == 16b000100010011XXXX) ){}
          }
      diff_lvls.H4: //Their love overflows: A + B = 1 XXXX XXXX XXXX XXXX
        hard = true;
        stageLED = 4b1000;
        
        combine.alufn = Func.OVFL;
               
        if(count.q[24] == 1){
          count.d = 0;
          if(combine.out == 1
          }
      
      
      
      
      
      
      
    }
    
    
    
    //Reset from middle of gameplay
    if (b.q[15:0] == 16b1111111111111111 && a.q[15:0] == 16b1010101010101010 && submit == 1 && diff_btn == 2b00){
      count.d = 0;
      diff_lvls.d = diff_lvls.SELECT_DIFFICULTY;
    }
  }
}