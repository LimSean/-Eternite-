
global Func{
  const ADD   = 3b001;      // a + b
  const NOR   = 3b010;      // Returns NOR logic
  const XOR   = 3b011;      // Returns XOR logic
  const CMPEQ = 3b100;      // a == b
  const LDR   = 3b101;      // Loads
  const MUL   = 3b110;      // a *  b
  const OVFL  = 3b111;      //checks overflow. If true returns 1, else 0.
  
}



module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer fu    output io_led [3][8],   // LEDs on IO Shield
    
    
    //Game Inputs and Outputs
    input toggleD[2],
    output ledD[2],
    
    input user_input[16],
    output user_input_led[16],
    input toggleAB,
    input enter_btn,
    output stage[4],
    output right_led,
    output wrong_led,
    
    output buzz,
    output timer_led[10]
    
  ) {
  
  sig rst;                  // reset signal
  
  var on;
  var off;
  
  var true;
  var false;
  
  eternite_fsm eternite;
  

  
  
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8hFF;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    
    
    eternite.user_input = user_input;
    user_input_led = user_input;
    buzz = eternite.buzz;
    eternite.clk = clk;
    eternite.rst = rst;
    eternite.toggleAB = toggleAB;
    eternite.enter_btn = enter_btn;
    stage = eternite.stage;
    eternite.toggleD = toggleD;
    ledD = eternite.ledD;
    
    timer_led = eternite.timer_led;
    right_led = eternite.right_led;
    wrong_led = eternite.wrong_led;
    


    
    
    

    

  }
}