module buzzer (
    input clk,  // clock
    input rst,  // reset
    output buzz,
    input state[2] //1 is right, 2 is wrong, 3 is timeout
  ) {
  
  dff timer[27] (.clk(clk), .rst(rst));
  dff freq[26] (.clk(clk), .rst(rst));
  fsm right_wrong(.clk(clk), .rst(rst)) = {IDLE, RIGHT, WRONG, TIMEOUT};
  
  always {
    buzz = 0;
    freq.d = freq.q + 1;
    timer.d = timer.q + 1;
    
    
    
    case(right_wrong.q){
      right_wrong.IDLE:
        buzz = 0;
        if       (state == 1){
          timer.d = 0;
          right_wrong.d = right_wrong.RIGHT;
        }else if (state == 2){
          timer.d = 0;
          right_wrong.d = right_wrong.WRONG;
        }else if (state == 3){
          timer.d = 0;
          right_wrong.d = right_wrong.TIMEOUT;
        }
      
      right_wrong.RIGHT:
        
        buzz = 1;
        /*if(freq.q[14] == 1){
          buzz = 1;
        }*/
        if (timer.q[24] == 1){
          timer.d = 0;
          right_wrong.d = right_wrong.IDLE;
        }
      
      
      right_wrong.WRONG:
        if(freq.q[15] == 1){
          buzz = 1;
        }
        if (timer.q[25] == 1){
          timer.d = 0;
          right_wrong.d = right_wrong.IDLE;
        }
      
      right_wrong.TIMEOUT:
        if(freq.q[15] == 1){
          buzz = 1;
        }
        if (timer.q[26] == 1){
          timer.d = 0;
          right_wrong.d = right_wrong.IDLE;
        }
    }
  }
}